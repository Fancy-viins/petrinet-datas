(define (domain automation_production)
	(:predicates  
		(is_busy ?location)(robotAt ?location)
		(neighbor ?location1 ?location2)(neighbor ?location2 ?location1)(neighbor ?location2 ?location3)(neighbor ?location3 ?location2)(neighbor ?location3 ?location4)(neighbor ?location4 ?location3)
		(location1 ?location1)(location2 ?location2)(location3 ?location3)(location4 ?location4)
		)
	(:types part
    	(attribute: (int position[4] ) , (int process[4]))
	)
	(:types buffer_out
    	(attribute: (int num))
	)
	(:types buffer_in
		(attribute: (int num))
	)
	(:action part_move01
	:parament(location ?source,location ?dst)
	:precondition(and(at start(part.position == 0 , part.process == 0))
				 (at start(robotAt ?source))(at start (is_busy ?source))(at start(not (is_busy ?dst)))(at start(location1 ?source))(at start(location2 ?dst)))
	:effect(and (at end(part.position = 1 , part.process = 0))
				(at end(robotAt ?dst))(at end(is_busy ?dst))(at start(location1 ?source))(at start(location2 ?dst))
	            (at start(not (robotAt ?source)))(at start(not (is_busy ?source)))
		)
	)

	(:action part_move02
	:parament(location ?source,location ?dst)
	:precondition(and(at start(part.position == 0 , part.process == 0))(at start(robotAt ?source))(at start (is_busy ?source))(at start(not (is_busy ?dst)))(at start(location1 ?source))(at start(location3 ?dst)))
	:effect(and (at end(part.position = 2 , part.process = 0))
				(at end(robotAt ?dst))(at end(is_busy ?dst))(at start(location1 ?source))(at start(location3 ?dst))
	            (at start(not (robotAt ?source)))(at start(not (is_busy ?source)))
		)
	)
	(:action part_move12
	:parament( location ?source,location ?dst)
	:precondition(and(at start(part.position == 1 , part.process == 1))(at start(robotAt ?source))(at start (is_busy ?source))(at start(not (is_busy ?dst)))(at start(location2 ?source))(at start(location3 ?dst)))
	:effect(and (at end(part.position = 2 ,part.process = 1 ))(at end(robotAt ?dst))(at end(is_busy ?dst))(at start(location2 ?source))(at start(location3 ?dst))
	            (at start(not (robotAt ?source)))(at start(not (is_busy ?source)))
		)
	)
	(:action part_move21
	:parament( location ?source,location ?dst)
	:precondition(and(at start(part.position == 2 , part.process == 2))
					 (at start(robotAt ?source))(at start (is_busy ?source))(at start(not (is_busy ?dst)))(at start(location3 ?source))(at start(location2 ?dst)))
	:effect(and (at end(part.position = 1 ,part.process = 2 ))
				(at end(robotAt ?dst))(at end(is_busy ?dst))(at start(location3 ?source))(at start(location2 ?dst))
	            (at start(not (robotAt ?source)))(at start(not (is_busy ?source)))
		)
	)
	(:action part_move23
	:parament( location ?source,location ?dst)
	:precondition(and(at start(part.position == 2 , part.process == 3))(at start(robotAt ?source))(at start (is_busy ?source))(at start(not (is_busy ?dst)))(at start(location3 ?source))(at start(location4 ?dst)))
	:effect(and (at end(part.position = 3 , part.process = 3))
				(at end(robotAt ?dst))(at start(not (is_busy ?source)))(at end(is_busy ?dst))(at start(location3 ?source))(at start(location4 ?dst))
	            (at start(not (robotAt ?source)))
		)
	)
	(:action part_move13
	:parament( location ?source,location ?dst)
	:precondition(and(at start(part.position == 1 , part.process == 3))
					 (at start(robotAt ?source))(at start (is_busy ?source))(at start(not (is_busy ?dst)))(at start(location2 ?source))(at start(location4 ?dst)))
	:effect(and (at end(part.position = 3 , part.process = 3))
				(at end(robotAt ?dst))(at start(not (is_busy ?source)))(at end(is_busy ?dst))(at start(location2 ?source))(at start(location4 ?dst))
	            (at start(not (robotAt ?source)))
		)
	)
	(:action create_new_part
	:parament(location ?source)
	:precondition(and(at start(not (is_busy ?source)))(at start(buffer_in.num >=1))(at start(location1 ?source)))
	:effect(and (at end(part.position = 0 , part.process = 0))(at start(location1 ?source))
	                  (at end(is_busy ?source)))
		)
	)

	(:action processing_0
	:parament()
	:constraints()
	:precondition(and(at start(part.position == 1 , part.process == 0)))
	:effect(and (at end(part.position = 1 , part.process = 1))
		)
	)
	(:action processing_1
	:parament()
	:constraints()
	:precondition(and (at start(part.position == 1 , part.process == 2)) )
	:effect(and  (at end(part.position = 1, part.process = 3)) 
		)
	)

	(:action assembly_0
	:parament()
	:constraints()
	:precondition(and (at start(part.position == 2 , part.process == 0)) )
	:effect(and  (at end(part.position = 2 , part.process = 2)) 
		)
	)
	(:action assembly_1
	:parament()
	:constraints()
	:precondition(and (at start(part.position == 2 , part.process == 1)) )
	:effect(and  (at end(part.position = 2, part.process = 3)) 
		)
	)
	(:action sort
	:parament( location ?loc)
	:precondition(and(at start(part.position == 3 , part.process == 3))(at start(location4 ?loc))(at start(is_busy ?loc)))
	:effect(and (at start(not (is_busy ?loc)))(at start(location4 ?loc))(at end(buffer_out.num +=1))
		)
	)

	(:action move
	:parament(location ?source,location ?dst)
	:precondition(and(at start(robotAt ?source))(at start(neighbor ?source ?dst)))
	:effect(and (at end(robotAt ?dst))(at start(not (robotAt ?source)))(at start(neighbor ?source ?dst))
		)
	)
)