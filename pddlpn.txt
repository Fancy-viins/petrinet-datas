(define (domain automation_production)
(:types part
    (attribute: (int position[4] ) , (int process[4]))
)
(:types robot
    (attribute: (int position[4] ))
)
(:types station
    (attribute: (int id[4] ) ,(bool idle))
)
(:types buffer_out
    (attribute: (int num))
)
(:types buffer_in
    (attribute: (int num))
)

(:action create_new_part
:parament()
:constraints()
:precondition(and(at start ( buffer_in.num >= 1))
                 (at start (station.id == 0 , station.idle == true))
             )
)
:effect(and (at end(part.position = 0 , part.process = 0))
            (at end(station.id = 0 , station.idle = false))
            (at end(buffer_in.num -= 1))
    )
)


(:action processing_0
:parament()
:constraints()
:precondition(and(at start(part.position == 1 , part.process == 0))
:effect(and (at end(part.position = 1 , part.process = 1))
    )
)
(:action processing_1
:parament()
:constraints()
:precondition(and (at start(part.position == 1 , part.process == 2)) )
:effect(and  (at end(part.position = 1, part.process = 3)) 
    )
)

(:action assembly_0
:parament()
:constraints()
:precondition(and (at start(part.position == 2 , part.process == 0)) )
:effect(and  (at end(part.position = 2 , part.process = 2)) 
    )
)
(:action assembly_1
:parament()
:constraints()
:precondition(and (at start(part.position == 2 , part.process == 1)) )
:effect(and  (at end(part.position = 2 , part.process = 3)) 
    )
)

(:action sort
:parament()
:constraints()
:precondition(and (at start(part.position == 3 , part.process == 3)) )
:effect(and  (at end(part.position = 3 ))(at end (buffer_out.num += 1)) 
    )
)

(:action part_move01
:parament()
:constraints()
:precondition(and (at start(part.position == 0 , part.process == 0)) 
                  (at start(robot.position == 0)) )
                  (at start (station.id==1 , station.idle== true)) 
                  (at start (station.id==0 , station.idle==false)) 
:effect(and (at end(part.position == 1 , part.process == 0))  
            (at end(robot.position == 1)) 
                 (at end (station.id=0 , station.idle=true)) 
                 (at end (station.id=1 , station.idle=false)) 
    )
)
(:action part_move02
:parament()
:constraints()
:precondition(and(at start(part.position == 0 , part.process == 0))
                (at start(robot.position == 0))
                (at start (station.id==2 , station.idle==ture))
                (at start (station.id==0 , station.idle==false)) 
            )
:effect(and (at end(part.position = 2 , robot.position = 2))
            (at end(part.process = 0))
            (at end (station.id=0 , station.idle=true))
            (at end (station.id=2 , station.idle=false))
    )
)
(:action part_move12
:parament()
:constraints()
:precondition(and(at start(part.position == 1 , part.process == 1))
                 (at start(robot.position == 1)))
                (at start (station.id==2 , station.idle==ture))
                (at start (station.id==0 , station.idle==false)) 
:effect(and (at end(part.position = 2 , robot.position = 2))
            (at end(part.process = 1))
            (at end (station.id=1 , station.idle=true))
            (at end (station.id=2 , station.idle=false))
    )
)
(:action part_move13
:parament()
:constraints()
:precondition(and(at start(part.position == 1 , part.process == 3))
                 (at start(robot.position == 1))
                (at start (station.id==3 , station.idle==ture))
                (at start (station.id==1 , station.idle==false))
            )
:effect(and (at end(part.position = 3 , robot.position = 3))
            (at end(part.process = 3 ) )
            (at end (station.id=1 , station.idle=true))
            (at end (station.id=3 , station.idle=false))
        
    )
)
(:action part_move21
:parament()
:constraints()
:precondition(and(at start(part.position == 2 , part.process == 2))
                 (at start(robot.position == 2))
                 (at start (station.id==1 , station.idle==ture))
                 (at start (station.id==2 , station.idle==false))
)
:effect(and (at end(part.position = 2 , robot.position = 3))
            (at end(part.process = 2))
            (at end (station.id=2 , station.idle=false))
            (at end (station.id=1 , station.idle=true))
    )
)
(:action part_move23
:parament()
:constraints()
:precondition(and(at start(part.position == 2 , part.process == 3))
                 (at start(robot.position == 2))
             (at start (station.id==2 , station.idle==false))
             (at start (station.id==3 , station.idle==true))  
)  
:effect(and (at end(part.position = 3 , part.process = 3))
            (at end(part.process = 3))
            (at end (station.id=2 , station.idle=false))
    )
)

(:action move
:parament((robot.position ?src)(robot.position ?dst))
:constraints((dst-src==1)||(src-dst==1))
:precondition(and(at start(robot.position == src)))
:effect(and (at end(robot.position = dst))
    )
)